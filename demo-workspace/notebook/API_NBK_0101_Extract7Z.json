{
	"name": "API_NBK_0101_Extract7Z",
	"properties": {
		"description": "API Analytics Demo\nAzure Synapse Analytics Demo\nhttps://github.com/aessing/demo-azuresynapse\n\nDeveloper\nAndre Essing\n(https://www.andre-essing.de/\n(https://github.com/aessing\n(https://twitter.com/aessing\n(https://www.linkedin.com/in/aessing/)\n\nTHIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\nEITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.",
		"folder": {
			"name": "API Analytics/01 Data Engineer"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DemoSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "3f3cbed7-2e6d-4054-87af-78f8e0c8f239"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/21194b02-afea-4d59-a0c9-9486eeb9d27f/resourceGroups/rg-aes-dwh-tmp-001/providers/Microsoft.Synapse/workspaces/synw-aes-dwh-tmp-001/bigDataPools/DemoSparkPool",
				"name": "DemoSparkPool",
				"type": "Spark",
				"endpoint": "https://synw-aes-dwh-tmp-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DemoSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 60
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# API Analytics Demo\r\n",
					"## Azure Synapse Analytics Demo\r\n",
					"https://github.com/aessing/demo-azuresynapse\r\n",
					"\r\n",
					"## Developer\r\n",
					"Andre Essing</br>\r\n",
					"https://www.andre-essing.de/</br>\r\n",
					"https://github.com/aessing</br>\r\n",
					"https://twitter.com/aessing</br>\r\n",
					"https://www.linkedin.com/in/aessing/\r\n",
					"\r\n",
					"> THIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\r\n",
					"> EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\r\n",
					"> WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Notebook information\r\n",
					"\r\n",
					"7Zip Extract Library (https://github.com/miurahr/py7zr) is needed to run this notebook and extract the incoming data.\r\n",
					"The library needs to be added to the Spark session (https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-manage-python-packages#session-scoped-packages-preview)\r\n",
					"\r\n",
					"Content of yaml file below:\r\n",
					"```yaml\r\n",
					"name: unzip\r\n",
					"channels:\r\n",
					"  - defaults\r\n",
					"dependencies:\r\n",
					"  - pip:\r\n",
					"    - py7zr==0.16.3\r\n",
					"```\r\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Set some parameters\r\n",
					"\r\n",
					"Can be overriden by Azure Synapse Pipelines"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# Parameter Cell: https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-development-using-notebooks#integrate-a-notebook\n",
					"\n",
					"# Storage account linked service name\n",
					"linkedService = 'Main_DataLake_001'\n",
					"\n",
					"# file system where 7z archive is located\n",
					"container = 'abfss://apianalytics@dlsaesdwhtmp002data.dfs.core.windows.net'\n",
					"\n",
					"# 7z file to extract\n",
					"inputFile = '/temp/downloaded/ApiAnalyticsData.7z'\n",
					"\n",
					"# target directory for extracted files\n",
					"targetDir = '/temp/extracted'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Import some libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import py7zr\r\n",
					"from os import listdir\r\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Extract the data"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# set up mount point\n",
					"mountPoint = '/fs-extract'\n",
					"mssparkutils.fs.mount(container, mountPoint, { \"linkedService\": linkedService })\n",
					"\n",
					"try: \n",
					"    # job session id required to access mount point files\n",
					"    jobId = mssparkutils.env.getJobId()\n",
					"\n",
					"    # extraction\n",
					"    mountPointPath = f\"/synfs/{jobId}{mountPoint}\"\n",
					"    with py7zr.SevenZipFile(f\"{mountPointPath}{inputFile}\", mode='r') as z:\n",
					"        z.extractall(path=f\"{mountPointPath}/extract-{jobId}\")\n",
					"\n",
					"    # move from temporary to target path\n",
					"    targetPath = f\"{container}{targetDir}\"\n",
					"    mssparkutils.fs.rm(targetPath, True),\n",
					"    mssparkutils.fs.mv(f\"{container}/extract-{jobId}\", targetPath, overwrite=True)\n",
					"\n",
					"finally:\n",
					"    # release mount point\n",
					"    mssparkutils.fs.unmount(mountPoint)"
				],
				"execution_count": 3
			}
		]
	}
}